env:
  PLUGIN_PROJECT_NAME: Divination.AetheryteLinkInChat
  PLUGIN_REPOSITORY: horoscope-dev/Dalamud.DivinationPluginRepo

### BEGIN TEMPLATE ###

name: Build

on:
  push:
    paths-ignore:
      - '*.md'

  release:
    types:
      - created

  pull_request:
    types:
      - opened
      - synchronize
    paths-ignore:
      - '*.md'

  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
          # Required by GitVersion
          fetch-depth: 0

      - name: Download Dalamud
        run: |
          Invoke-WebRequest -Uri ${{ env.DALAMUD_ZIP_URL }} -OutFile latest.zip
          Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev\"
        env:
          DALAMUD_ZIP_URL: https://goatcorp.github.io/dalamud-distrib/net5/latest.zip

      - name: Restore Nuget Cache
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore Nuget Packages
        run: dotnet restore

      - name: Prepare Plugin Meta
        run: |
          $json_path = ".\${{ env.PLUGIN_PROJECT_NAME }}\${{ env.PLUGIN_PROJECT_NAME }}.json"
          $json = Get-Content $json_path | ConvertFrom-Json -AsHashtable
          echo "PLUGIN_AUTHOR=Copyright (c) $($json["Author"].Replace(",", "%2c"))" >> $env:GITHUB_ENV
          echo "PLUGIN_DESCRIPTION=$($json["Description"].Replace(",", "%2c"))" >> $env:GITHUB_ENV

      - name: Build Plugin
        run: dotnet build --configuration Release --no-restore --nologo -maxcpucount:1 /p:OutputPath=bin\CIRelease\ /p:Product=Divination /p:Company=Horoscope '/p:Copyright="${{ env.PLUGIN_AUTHOR }}"' '/p:AssemblyTitle="${{ env.PLUGIN_DESCRIPTION }}"'

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PLUGIN_PROJECT_NAME }}
          path: ${{ env.PLUGIN_PROJECT_NAME }}\bin\CIRelease\${{ env.PLUGIN_PROJECT_NAME }}
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.repository != 'horoscope-dev/Dalamud.Divination.Template' && github.event_name != 'pull_request' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout Plugin Repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.PLUGIN_REPOSITORY }}
          token: ${{ secrets.GH_PAT }}

      - name: Prepare Short SHA
        uses: benjlevesque/short-sha@v1.2
        id: short-sha

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PLUGIN_PROJECT_NAME }}
          path: dist/testing/${{ env.PLUGIN_PROJECT_NAME }}

      - name: Prepare commits.json
        run: |
          curl \
            -o dist/testing/${{ env.PLUGIN_PROJECT_NAME }}/commits.json \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_PAT }}" \
            https://api.github.com/repos/${{ github.repository }}/commits

      - name: Prepare event.json
        run: echo '${{ toJSON(github.event) }}' > dist/testing/${{ env.PLUGIN_PROJECT_NAME }}/event.json

      - name: Copy Artifact (stable)
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
        run: cp -rf dist/testing/${{ env.PLUGIN_PROJECT_NAME }} dist/stable/${{ env.PLUGIN_PROJECT_NAME }}

      - name: Push to Plugin Repository
        uses: EndBug/add-and-commit@v7
        continue-on-error: true
        with:
          default_author: github_actions
          pull: NO-PULL
          message: Deploy ${{ env.PLUGIN_PROJECT_NAME }} @ ${{ steps.short-sha.outputs.sha }}
